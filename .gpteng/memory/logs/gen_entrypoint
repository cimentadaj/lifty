[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nLet's start by creating the Django project and the necessary apps. We will need two apps: one for handling users and another for handling experiments. \n\nrun.sh\n```bash\n#!/bin/bash\n\n# Create a virtual environment\npython3 -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate\n\n# Install Django\npip install Django\n\n# Create a new Django project named 'lifty'\ndjango-admin startproject lifty\n\n# Navigate into the project directory\ncd lifty\n\n# Create two Django apps: 'users' and 'experiments'\npython manage.py startapp users\npython manage.py startapp experiments\n\n# Run migrations\npython manage.py makemigrations\npython manage.py migrate\n\n# Run the server\npython manage.py runserver\n```\n\nNow, let's define the models for our users and experiments.\n\nlifty/users/models.py\n```python\nfrom django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=255)\n    avatar = models.ImageField(upload_to='avatars/')\n```\n\nlifty/experiments/models.py\n```python\nfrom django.db import models\nfrom users.models import User\n\nclass Experiment(models.Model):\n    STATUS_CHOICES = [\n        ('D', 'Draft'),\n        ('R', 'Running'),\n        ('RD', 'Ready'),\n        ('W', 'Wrap Up'),\n        ('C', 'Concluded'),\n    ]\n\n    name = models.CharField(max_length=255)\n    status = models.CharField(max_length=2, choices=STATUS_CHOICES, default='D')\n    target_details = models.TextField()\n    primary_metric = models.CharField(max_length=255)\n    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n    diagnostics = models.TextField()\n    start_date = models.DateField()\n    end_date = models.DateField()\n```\n\nNext, let's create the views for our users and experiments.\n\nlifty/users/views.py\n```python\nfrom django.shortcuts import render\nfrom .models import User\n\ndef user_list(request):\n    users = User.objects.all()\n    return render(request, 'users/user_list.html', {'users': users})\n```\n\nlifty/experiments/views.py\n```python\nfrom django.shortcuts import render\nfrom .models import Experiment\n\ndef experiment_list(request):\n    experiments = Experiment.objects.all()\n    return render(request, 'experiments/experiment_list.html', {'experiments': experiments})\n```\n\nNow, let's create the templates for our views.\n\nlifty/users/templates/users/user_list.html\n```html\n{% for user in users %}\n    <div>\n        <h2>{{ user.name }}</h2>\n        <img src=\"{{ user.avatar.url }}\" alt=\"{{ user.name }}\">\n    </div>\n{% endfor %}\n```\n\nlifty/experiments/templates/experiments/experiment_list.html\n```html\n{% for experiment in experiments %}\n    <div>\n        <h2>{{ experiment.name }}</h2>\n        <p>{{ experiment.status }}</p>\n        <p>{{ experiment.target_details }}</p>\n        <p>{{ experiment.primary_metric }}</p>\n        <p>{{ experiment.owner.name }}</p>\n        <p>{{ experiment.diagnostics }}</p>\n        <p>{{ experiment.start_date }}</p>\n        <p>{{ experiment.end_date }}</p>\n    </div>\n{% endfor %}\n```\n\nFinally, let's create the URLs for our views.\n\nlifty/users/urls.py\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.user_list, name='user_list'),\n]\n```\n\nlifty/experiments/urls.py\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.experiment_list, name='experiment_list'),\n]\n```\n\nAnd include these URLs in the main project's URL configuration.\n\nlifty/lifty/urls.py\n```python\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('users/', include('users.urls')),\n    path('experiments/', include('experiments.urls')),\n]\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "```bash\n# Make the script executable\nchmod +x run.sh\n\n# Run the script\n./run.sh\n```", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]